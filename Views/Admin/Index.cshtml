@using GearRent.PaginatedList;
@model PaginatedList<GearRent.Models.Reservation>
@{
    Layout = "~/Views/Admin/_AdminLayout.cshtml";

    ViewBag.Title = "Profile";
    ViewBag.ControllerName = "Admin";
    ViewBag.ActionName = "Index";


}
@{
    var reservationStatusValues = Enum.GetValues(typeof(ReservationStatus)).Cast<ReservationStatus>();
}


<h2>Upcoming Bookings</h2>

<div class="row m-4">
    <div class="col">
        <div class="d-flex justify-content-center">
            <div class="legend">
                <span class="badge bg-success m-2">In Progress</span>
                <span class="badge bg-danger m-2">Canceled</span>
                <span class="badge bg-warning text-dark m-2">Unpaid</span>
                <span class="badge bg-primary m-2">Approved</span>
                <span class="badge bg-secondary m-2">Finished</span>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-4 mb-3">
        <label for="daysAhead" class="form-label">Reservations up to:</label>
        <select id="daysAhead" name="daysAhead" class="form-select">
            <option value="7">7 days</option>
            <option value="14">14 days</option>
            <option value="30">30 days</option>
        </select>
    </div>
    <div class="col-md-3 mb-3">
        <label for="pageSize" class="form-label">Page size:</label>
        <select id="pageSize" name="pageSize" class="form-select">
            <option value="3">3</option>
            <option value="5">5</option>
            <option value="10">10</option>
        </select>
    </div>
    <div class="col-md-4 mb-3">
        <label class="form-label">Statuses:</label>
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" id="statusDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                Select Status
            </button>
            <ul class="dropdown-menu" aria-labelledby="statusDropdown">
                @foreach (var status in reservationStatusValues)
                {
                    <li>
                        <div class="form-check">
                            <input type="checkbox" name="show@(status)" value="true" class="form-check-input" id="show@(status)">
                            <label class="form-check-label" for="show@(status)">@status</label>
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Reservation ID</th>
            <th>Car</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="filteredResults">
        @foreach (var reservation in Model)
        {
            <tr>
                <td>@reservation.Id</td>
                <td>@reservation.Car.Make @reservation.Car.Model</td>
                <td>@reservation.StartDate.ToShortDateString()</td>
                <td>@reservation.EndDate.ToShortDateString()</td>
                <td>
                    @if (reservation.Status == ReservationStatus.Approved || reservation.Status == ReservationStatus.Unpaid)
                    {
                        <button class="cancel-link" data-reservation-id="@reservation.Id">
                            <i class="fa fa-trash"></i>
                        </button>
                    }

                </td>
            </tr>
        }
    </tbody>
</table>
@*@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}*@
@if (Model != null)
{

    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";

    <div class="d-flex justify-content-between">
        <a asp-action="Index"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex - 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-default @prevDisabled prev-link">
            Previous
        </a>

        <a asp-action="Index"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex + 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-default @nextDisabled next-link" id="next-link">
            Next
        </a>
    </div>
}
<script>
    $(document).ready(function () {

        applyFilters();

        function applyFilters() {
            const daysAhead = $('#daysAhead').val();
            const pageSize = $('#pageSize').val();
            const statuses = $('[name^="show"]:checked').map(function () {
                return this.name.substring(4);
            }).get();

            const data = {
                daysAhead: daysAhead,
                pageSize: pageSize,
                showInProgress: statuses.includes("InProgress"),
                showApproved: statuses.includes("Approved"),
                showUnpaid: statuses.includes("Unpaid"),
                showFinished: statuses.includes("Finished"),
                showCanceled: statuses.includes("Canceled"),
                isAjaxRequest: true
            };
            localStorage.setItem("filtersReservations", JSON.stringify(data));

            $.ajax({
                type: 'GET',
                url: '@Url.Action("Index", "Admin")',
                data: data,
                success: function (result, status, xhr) {
                    $('#filteredResults').html(result);
                    totalPages = parseInt(xhr.getResponseHeader('X-Total-Pages'));
                    pageNumber = parseInt(xhr.getResponseHeader('X-Current-Page'));
                    managePaginationButtons(pageNumber, totalPages);
                },
                error: function () {
                    alert("An error occurred while loading results.");
                }
            });
        }

        $('.prev-link').on('click', function (e) {
            e.preventDefault();
            var prevPage = pageNumber - 1;
            if (prevPage >= 1) {
                updateResults(prevPage);
            }
        });

        $('.next-link').on('click', function (e) {
            e.preventDefault();
            var nextPage = pageNumber + 1;
            if (nextPage <= totalPages) {
                updateResults(nextPage);
            }
        });

        function managePaginationButtons(currentPage, totalPages) {
            var $prevLink = $('.prev-link');
            var $nextLink = $('.next-link');

            if (currentPage == 1) {
                $prevLink.addClass('disabled');
            } else {
                $prevLink.removeClass('disabled');
            }

            if (currentPage == totalPages) {
                $nextLink.addClass('disabled');
            } else {
                $nextLink.removeClass('disabled');
            }
        }

        function updateResults(pageNumber1) {
            var data = JSON.parse(localStorage.getItem("filtersReservations"));

            $.ajax({
                type: 'GET',
                url: '@Url.Action("Index", "Admin")',
                data: { ...data, pageNumber: pageNumber1 },
                success: function (result, status, xhr) {
                    $('#filteredResults').html(result);
                    totalPages = parseInt(xhr.getResponseHeader('X-Total-Pages'));
                    pageNumber = parseInt(xhr.getResponseHeader('X-Current-Page'));
                    managePaginationButtons(pageNumber, totalPages);
                },
                error: function () {
                    alert("An error occurred while loading results.");
                }
            });
        }

        $('#daysAhead').change(applyFilters);
        $('#pageSize').change(applyFilters);
        $('[name^="show"]').change(applyFilters);

        document.addEventListener("click", function (event) {
            if (event.target.classList.contains("cancel-link")) {
                event.preventDefault();
                const reservationId = event.target.getAttribute("data-reservation-id");
                confirmDelete(reservationId);
            }
        });

        function confirmDelete(reservationId) {
            if (confirm(`Are you sure you want to cancel the reservation with ID ${reservationId}?`)) {
                cancelReservation(reservationId);
            }
        }

        function cancelReservation(reservationId) {
            $.ajax({
                url: '@Url.Action("CanceledStatus", "Reservations")',
                type: 'PUT',
                data: { id: reservationId },
                success: function () {
                    applyFilters();
                },
                error: function (xhr, status, error) {
                    console.error(error);
                    alert('An error occurred while canceling the reservation.');
                }
            });
        }
    });
</script>
